{"version":3,"sources":["data/breakpoint.ts","data/board-initial-data.ts","components/button.tsx","components/board-item.tsx","components/board-column.tsx","components/board.tsx","index.tsx"],"names":["size","device","iphone5se","concat","iphone678","iphone678plus","ipad","laptop","surfaceDuo","galaxyFold","initialBoardData","items","item-1","id","content","item-2","item-3","columns","column-1","title","itemsIds","column-2","column-3","columnsOrder","Button","props","onClick","variant","ButtonEl","styled","button","_templateObject","Object","taggedTemplateLiteral","_ref","_ref$variant","_ref2","_ref2$variant","_ref3","_ref3$variant","react","type","BoardItemEl","div","board_item_templateObject","isDragging","InputWrapperEl","_templateObject2","InputEl","input","_templateObject3","BoardItem","item","index","column","dataState","setDataState","setEditState","_useState","useState","_useState2","slicedToArray","inputState","setInputState","changeHanddler","e","target","value","confirmHandler","itemId","substring","newDataState","objectSpread2","newItem","localStorage","setItem","JSON","stringify","deleteHandler","columnId","substr","itemsArr","i","length","splice","editHandler","react_beautiful_dnd_esm","draggableId","provided","snapshot","assign","draggableProps","dragHandleProps","ref","innerRef","isActive","autoFocus","onChange","placeholder","button_Button","key","BoardColumnWrapper","board_column_templateObject","BoardColumnHeader","board_column_templateObject2","BoardColumnTitle","h2","board_column_templateObject3","BoardColumnContent","_templateObject4","isDraggingOver","BoardColumn","itemList","editState","targetKey","count","keys","lastId","newItemId","parseInt","newItemsIds","unshift","newColumn","droppableId","droppableProps","map","board_item_BoardItem","HeadEl","h1","board_templateObject","DroppableBoardEl","board_templateObject2","Board","initialDataState","initialItems","prototype","hasOwnProperty","call","jsonLocalData","getItem","jsonParsedDataState","parse","onDragEnd","result","source","destination","undefined","newColumnsOrder","Array","from","columnStart","columnFinish","newColumnStart","newState","defineProperty","_objectSpread3","newStartItemsIds","newFinishItemsIds","newColumnFinish","direction","board_column_BoardColumn","GlobalStyle","createGlobalStyle","src_templateObject","Page","board_Board","ReactDOM","src_Page","document","getElementById"],"mappings":"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","file":"static/js/main.99d64d99.chunk.js","sourcesContent":["const size = {\r\n    galaxyFold:'280px',\r\n    iphone5se: '320px',\r\n    iphone678: '375px',\r\n    iphone678plus:'414px',\r\n    surfaceDuo:'540px',\r\n    ipad: '768px',\r\n    laptop: '1024px'\r\n};\r\n\r\nconst device = {    iphone5se: `(min-width: ${size.iphone5se})`,\r\n    iphone678: `(min-width: ${size.iphone678})`,\r\n    iphone678plus: `(min-width: ${size.iphone678plus})`,\r\n    ipad: `(min-width: ${size.ipad})`,\r\n    laptop: `(min-width: ${size.laptop})`,\r\n    surfaceDuo:`(min-width: ${size.surfaceDuo})`,\r\n    galaxyFold:`(min-width: ${size.galaxyFold})`    \r\n};\r\n\r\n\r\nexport default device;","export const initialBoardData = {\n    items: {\n      'item-1': { id: 'item-1', content: 'Content of item 1.'},\n      'item-2': { id: 'item-2', content: 'Content of item 2.'},\n      'item-3': { id: 'item-3', content: 'Content of item 3.'}\n    },\n    columns: {\n      'column-1': {\n        id: 'column-1',\n        title: 'To do',\n        itemsIds: ['item-1', 'item-2', 'item-3']\n      },\n      'column-2': {\n        id: 'column-2',\n        title: 'Doing',\n        itemsIds: []\n      },\n      'column-3': {\n        id: 'column-3',\n        title: 'Done',\n        itemsIds: []\n      }\n    },\n    columnsOrder: ['column-1', 'column-2', 'column-3']\n  }","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport device from '../data/breakpoint';\r\n\r\n// Define types for board item element properties\r\ntype ButtonProps = {\r\n    variant: string,\r\n    id: string,\r\n    onClick: any\r\n}\r\n\r\n// Create button depending on range of situations based on variant\r\n\r\nexport const Button: React.FC<ButtonProps> = (props) => {\r\n    const { id, onClick, variant } = props;\r\n    const ButtonEl = styled.button<ButtonProps>`\r\n        color:white;\r\n        border: 0;\r\n        padding:0;\r\n        margin:3px;\r\n        border-radius: 50%;    \r\n        &:hover {\r\n            cursor: pointer;\r\n        }\r\n        @media ${device.galaxyFold} { \r\n            margin-block-start: 1vw;\r\n            min-width: 18px;\r\n            min-height: 18px;\r\n            font-size: 6px;\r\n         }\r\n    \r\n        ${({ variant = '' }) => variant === 'add' && `\r\n\r\n        background: linear-gradient(145deg, #5dffef, #4ee1c9);\r\n        box-shadow:  1.5px 1.5px 2px #39a391,\r\n                     -1.5px -1.5px 2px #75ffff;\r\n        @media ${device.galaxyFold} { \r\n           min-width:20px;\r\n           min-height:20px;\r\n           margin-block-start: 1vw;\r\n           font-size:5px;\r\n        }\r\n        `}\r\n        ${({ variant = '' }) => variant === 'confirm' && `\r\n        background: linear-gradient(145deg, #27ff4c, #20dd40);\r\n        box-shadow:  1.5px 1.5px 2px #179f2e,\r\n                     -1.5px -1.5px 2px #31ff60;\r\n        `} \r\n        ${({ variant = '' }) => variant === 'delete' && `\r\n        background: linear-gradient(145deg, #e91818, #c41414);\r\n        box-shadow:  1.5px 1.5px 2px #b71212,\r\n                     -1.5px -1.5px 2px #fd1a1a;\r\n\r\n        `}  \r\n     `\r\n    return (\r\n        <ButtonEl id={id} onClick={onClick} variant={variant} type=\"button\">\r\n            {variant === 'add' && '╋'}\r\n            {variant === 'confirm' && '✔'}\r\n            {variant === 'delete' && '─'}\r\n        </ButtonEl>\r\n    );\r\n};","import * as React from 'react';\nimport { useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { Button } from './button';\nimport device from '../data/breakpoint';\n\n// Define types for board item element properties\ntype BoardItemProps = {\n  item: any,\n  index: any,\n  column: any,\n  editState: any,\n  setEditState: any,\n  // confirmState: any,\n  // setConfirmState: any,\n  dataState: any,\n  setDataState: any,\n  // deleteState: any,\n  // setDeleteState: any\n}\n// Define types for board item element style properties\n// This is necessary for TypeScript to accept the 'isDragging' prop.\ntype BoardItemStylesProps = {\n  isDragging: boolean\n}\n\n// Create style for board item element\nconst BoardItemEl = styled.div<BoardItemStylesProps>`\n  display:flex;\n  background-color: ${(props) => props.isDragging ? '#d3e4ee' : '#ecf0f3'};\n  border-radius: 4px;\n  box-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px #fff;\n  margin-bottom:12px;\n  font-family: 'Montserrat', sans-serif;\n  letter-spacing: -0.2px;\n  padding:3px;\n  margin:6px;\n  background-color: #EBECF0;\n  text-shadow: 1px 1px 0 #FFF;\n  color: #61677C;\n  font-weight: bold;\n  transition: all 0.2s ease-in-out;\n  cursor: move;\n  line-height:3vh;  \n\n  &:hover {\n    box-shadow: -2px -2px 5px #FFF, 2px 2px 5px #BABECC;\n    cursor: pointer;\n  }\n\n  & + & {\n    margin-top: 8px;\n  }\n  @media ${device.galaxyFold} { \n    margin-block-start: 1px;\n    margin-block-end: 1px;\n    max-width: 60px;\n    font-size: 4.5vw;\n  }\n\n  @media ${device.iphone5se} { \n    margin-block-start: 1px;\n    margin-block-end: 1px;\n    max-width: 76px;\n    font-size: 4vw;\n  }\n  \n  @media ${device.iphone678} { \n    margin-block-start: 2px;\n    margin-block-end: 2px;\n    max-width: 90px;\n    font-size: 4vw;\n  }\n  @media ${device.iphone678plus} { \n    max-width: 120px;\n    font-size: 3.5vw;\n    margin:2px;\n  }\n  @media ${device.surfaceDuo} { \n    max-width: 150px;\n    font-size: 2.5vw;\n    margin:3px;\n    padding:8px;\n  }\n  \n  @media ${device.ipad} { \n    max-width: 200px;\n    font-size: 2vw;\n    margin:2vh;\n    padding:4vh;\n  }\n  @media ${device.laptop} { \n    max-width: 27vw;\n    font-size: 4vh;\n    margin:3vh;\n    padding:3vh;\n  }\n`\n\n// Create style for input item element\nconst InputWrapperEl = styled.div`\n display:flex;\n z-index: 1;\n justify-content: space-between; \n align-items: center;\n box-sizing: border-box;\n transition: all 0.2s ease-in-out;\n height:21px;\n max-width:400px;\n padding:2px; \n`\n\n// Create style for input item element\nconst InputEl = styled.input`\n  \n  margin-right: 4px;\n  background: #d0f6ec;\n  border-width:0; \n  box-shadow:  inset 2px 2px 5px #87a099, inset -5px -5px 10px #ffffff;\n  color: #61677C;\n  font-weight: bold; \n\n  &:focus {\n    outline: none;\n    color: #61677C;\n    font-weight: bold;  \n    box-shadow:  inset 1px 1px 2px #BABECC, inset -1px -1px 2px #FFF;\n  }\n  @media ${device.galaxyFold} { \n    font-size: 12px;\n    width: 100px;\n    height:30px;  \n    padding:2px;\n  }\n\n  @media ${device.iphone5se} { \n    font-size: 12px;\n    width: 110px;\n    height:20px;  \n    padding:3px;\n    margin:8px;\n  }\n  \n  @media ${device.iphone678} { \n    font-size: 15px;\n    width: 120px;\n    height:25px;  \n    padding:3px;\n    margin:3px;\n  }\n  @media ${device.iphone678plus} { \n    font-size:15px;\n    padding:3px;\n    margin:3px;\n    height:27px; \n  }\n  @media ${device.surfaceDuo} { \n    font-size:15px;\n    width:150px;\n    padding:3px;\n    margin:3px;\n    height:28px; \n  }\n  \n  @media ${device.laptop} { \n    width:18vw;\n    padding:6px;\n    margin:6px;\n    height:32px; \n    font-size:1.6vw;\n  }\n`\n\n// Create and export the BoardItem component\nexport const BoardItem = (props: BoardItemProps) => {\n  const { item, index, column, dataState, setDataState, setEditState } = props;\n  const [inputState, setInputState] = useState<any>(item.content);\n  // console.log('Item,Props:', props);\n\n  // Create handler for update the input content of item \n  const changeHanddler = (e: any) => {\n    // console.log('change:e:', e.target.value)\n    // console.log('change:item:', item)\n    if (!e.target.value || e.target.value === null || e.target.value === '') {\n      setInputState(item.content);\n    } else { setInputState(e.target.value); }\n  }\n  // Create handler for confirming the input content of item \n  const confirmHandler = (e: any) => {\n    // console.log('confirm,e:', e.target);\n    // let columnId: string = e.target.id.substr(7, 8);\n    let itemId = e.target.id.substring(15);\n    // console.log('confirm columnId:', columnId);\n    // console.log('confirm itemId:', itemId);\n    let newDataState = { ...dataState };\n    let newItem = newDataState['items'][itemId];\n    if (inputState === null) {\n      newItem.content = ''\n    } else {\n      newItem.content = inputState;\n    }\n    newItem['isActive'] = false;\n    // console.log('confirm dataState:', newDataState);\n    setDataState(newDataState);\n    localStorage.setItem('dataState', JSON.stringify({ dataState: newDataState }));\n  }\n\n  // Create handler for deleting the item \n  const deleteHandler = (e: any) => {\n    // console.log('delete dataState', dataState);\n    // console.log('delete column:', column);\n\n    // console.log('e.target:', e.target);\n    let columnId: string = e.target.id.substr(6, 8);\n\n    let itemId = e.target.id.substring(14);\n\n    // console.log('delete columnId', columnId);\n    // console.log('delete itemId', itemId);\n\n    // console.log('delete deleteState', deleteState);\n    // console.log('delete item:',dataState.items[`${itemId}`]);\n\n    // console.log('delete item:', item);\n    // delete dataState.items[`${itemId}`];\n    // let itemsIds = dataState.columns[`${columnId}`].itemsIds;\n    // let newDataState=JSON.parse(JSON.stringify(dataState));\n    let newDataState = { ...dataState };\n    // console.log('init newDataState:', newDataState);\n    delete newDataState['items'][itemId];\n    // console.log('pre newDataState:', newDataState);\n    let itemsArr = newDataState['columns'][columnId]['itemsIds'];\n    // console.log('old itemsIds:', itemsArr);\n    for (let i = 0; i < itemsArr.length; i++) {\n      if (itemsArr[i] === itemId) {\n        itemsArr.splice(i, 1);\n        i--;\n      }\n    }\n    // console.log('New itemsArr:', itemsArr);\n\n    // console.log('delete deleteState:', deleteState);\n\n    // console.log('new newDataState:', newDataState);\n\n    setDataState(newDataState);\n    localStorage.setItem('dataState', JSON.stringify({ dataState: newDataState }));\n  }\n\n\n  //Create handler for editting the item by click the item itself\n  const editHandler = (e: any) => {\n    // console.log('confirm, item id:', e.target.id);\n    let itemId = e.target.id;\n    let newDataState = { ...dataState };\n    let newItem = { ...item };\n    newItem['isActive'] = true;\n    newDataState['items'][itemId] = newItem;\n    item['isActive'] = true;\n\n    // console.log('confirm newDataState:', newDataState);\n     setEditState(item); \n    //  setDataState(newDataState);\n  \n    // console.log('edit,editState:', editState);\n    // console.log('edit,confirmState:', confirmState);\n    // item === confirmState && setConfirmState('');\n\n\n    // setEditState(item);\n  }\n\n  return <Draggable draggableId={item.id} index={index}>\n    {(provided, snapshot) => (\n      <BoardItemEl\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n        isDragging={snapshot.isDragging}\n      >\n        {\n          item.isActive ?\n            (<InputWrapperEl>\n              {item.content !== '' ?\n                <InputEl autoFocus type=\"text\" onChange={changeHanddler} placeholder={item.content} value={inputState} />\n                :\n                <InputEl autoFocus type=\"text\" onChange={changeHanddler} placeholder='New content of item' value={inputState} />\n              }\n              <Button variant='confirm' key={`confirm${item.id}`} id={`confirm${column.id}${item.id}`} onClick={confirmHandler} />\n              <Button variant='delete' key={`delete${item.id}`} id={`delete${column.id}${item.id}`} onClick={deleteHandler} />\n            </InputWrapperEl>\n            )\n            :\n            <div id={item.id} key={item.id} onClick={editHandler}>\n              {/* {item.content===''?\"\\u00A0\":item.content} */}\n              {item.content===''?\"✐\":item.content}\n            {/* if in JS, put &nbsp  */}\n            </div>\n        }\n      </BoardItemEl>\n    )}\n  </Draggable>\n}","import * as React from 'react';\nimport { useState } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { BoardItem } from './board-item';\nimport { Button } from './button';\nimport device from '../data/breakpoint';\n\n// Define types for board column element properties\ntype BoardColumnProps = {\n  column: any,\n  dataState: any,\n  items: any,\n  setDataState: any,\n}\n\n// Define types for board column content style properties\n// This is necessary for TypeScript to accept the 'isDraggingOver' prop.\ntype BoardColumnContentStylesProps = {\n  isDraggingOver: boolean\n}\n\n// Create styles for BoardColumnWrapper element\nconst BoardColumnWrapper = styled.div`\n  flex: 1;\n  padding: 15px;\n  background-color:#ecf0f3;\n  border-radius: 4px;\n  text-align:center;\n  box-shadow: inset 9px 9px 15px #d1d9e6, inset -9px -9px 15px #fff;  \n  transition: all 0.2s ease-in-out; \n  & + & {\n    margin-left: 12px;\n  }\n\n  @media ${device.galaxyFold} { \n    max-width: 180px;\n    padding:1px;\n    padding-bottom: 10px;\n    margin-top: 4vh;\n    margin-bottom:4vh;\n    line-height:45px;\n  }\n  @media ${device.iphone5se} { \n    max-width: 210px;\n    font-size:27px;\n  }\n  \n  @media ${device.iphone678} { \n    width: 27vw;\n    padding:5px;\n  }\n  @media ${device.surfaceDuo} { \n    width: 29vw;\n    padding:3px, 3px,15px,3px; \n  }\n  \n  @media ${device.ipad} { \n    max-width: 280px;\n    padding:0.1vw;\n    margin-top: 3vh;\n    margin-bottom:3vh;\n    line-height:8vw;\n  }\n  @media ${device.laptop} { \n    max-width: 30vw;\n    padding:0.5vh;\n    font-size:3vw;\n    margin-top: 3vh;\n    margin-bottom:3vh;\n    line-height:20vh;\n  }\n`\n// Create styles for BoardColumnHeader element\nconst BoardColumnHeader = styled.div`\n  display:flex; \n  justify-content:space-between;\n  align-items: center; \n\n  @media ${device.galaxyFold} { \n    flex-direction: column;\n    padding: 5px;\n    margin:10px;\n  }\n  @media ${device.surfaceDuo} { \n    flex-direction: row;\n    justify-content:space-between;\n    align-items: center;\n  }\n`\n// Create styles for BoardColumnTitle element\nconst BoardColumnTitle = styled.h2`\n  font:  sans-serif;\n  color: #61677C;\n  letter-spacing: -0.2px;\n  text-shadow: 1px 1px 0 #FFF;\n  line-height:5vh;\n\n  @media ${device.galaxyFold} { \n    margin-block-start: 1px;\n    margin-block-end: 1px;\n    max-width: 80px;\n    font-size:7vw;\n  }\n\n  @media ${device.iphone5se} { \n    font-size:6.5vw;\n  }\n  \n  @media ${device.iphone678plus} { \n    font-size:5vw;\n  }\n  @media ${device.surfaceDuo} { \n    font-size:4vw;\n  }\n  \n  @media ${device.ipad} { \n    font-size:3vw;\n  }\n  @media ${device.laptop} { \n    font-size:2.5vw;\n    max-width:20vw;\n  }\n`\n// Create styles for BoardColumnContent element\nconst BoardColumnContent = styled.div<BoardColumnContentStylesProps>`\n  min-height: 30px;\n  background-color: ${props => props.isDraggingOver ? '#d1d9e6' : null};\n  border-radius: 4px;\n  display:flex;\n  flex-direction: column;\n`\n// Create and export the BoardColumn component\nexport const BoardColumn: React.FC<BoardColumnProps> = (props) => {\n  //refactor the props\n  const { dataState, items, column, setDataState } = props;\n  const itemList = dataState.items;\n  const columns = dataState.columns;\n  // console.log('Column,Props:', props);\n  // Create handler for button to add item \n  const addItemHandler = (e: any) => {\n    //Check out the clicked button and define its column\n    let targetKey = (e.target as any).id;\n    // console.log('add e.id:', targetKey)\n    //Check out the number of the keys and name the added item\n    let count = Object.keys(itemList).length;\n    let lastId = Object.keys(itemList)[count - 1];\n    let largestIndex = parseInt(lastId.substring(5));\n    let newIndex = largestIndex + 1;\n    let newItemId: string = 'item-' + newIndex;\n    // let newItemContent: string = `Content of New item.`;\n\n    // update the current column list with the new added item    \n    // console.log('column column(prop):', column);\n    let newItemsIds = column.itemsIds;\n    // console.log('column oldItemsIds:', newItemsIds)\n    newItemsIds.unshift(newItemId);\n    // console.log('column newItemsIds:', newItemsIds)\n    let newColumn = {\n      ...column,\n      itemsIds: newItemsIds\n    }\n    columns[`${targetKey}`] = newColumn;\n    // column.itemsIds=newItemsIds;\n    // console.log('column new column:', column)\n    // console.log('column dataState1:',dataState)\n    // Create new Item to update Items \n    let newItem = {\n      id: newItemId,\n      content: '',\n      isActive: true\n    };\n    itemList[`${newItemId}`] = newItem;\n\n    // update dataState (update items list as well)\n    const newDataState = {\n      ...dataState,\n      items: itemList\n    }\n    // console.log('add item newDataState:', newDataState)\n    setDataState(newDataState);\n    localStorage.setItem('dataState', JSON.stringify({ dataState: newDataState }));\n  }\n\n  // Create handler for uplift the edited item state to its parent component\n  const [editState, setEditState] = useState<any>('');\n  // const [confirmState, setConfirmState] = useState<any>('');\n  // console.log('column :column(prop)', column)\n  // console.log('column :column.itemsIds', column.itemsIds)\n  // const [deleteState, setDeleteState] = useState<any>(column.itemsIds);\n\n\n  // const [deleteState, setDeleteState] = useState<any>(dataState);\n  // console.log('column deleteState:',deleteState)\n  // console.log('column editState:',editState)\n  // console.log('column confirmState:',confirmState) \n  // console.log('column setEditState:',setEditState)\n  // console.log('column setConfirmState:',setConfirmState) \n  // console.log('column confirmState:',confirmState) \n  return (\n    <BoardColumnWrapper>\n      <BoardColumnHeader>\n        <BoardColumnTitle>\n          {column.title}\n        </BoardColumnTitle>\n        <Button variant='add' key={column.id} id={column.id} onClick={addItemHandler} />\n      </BoardColumnHeader>\n      <Droppable droppableId={column.id}>\n        {(provided, snapshot) => (\n          <BoardColumnContent\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n            isDraggingOver={snapshot.isDraggingOver}\n          >\n            {items.map((item: any, index: number) =>\n              <BoardItem\n                key={item.id}\n                item={item}\n                column={column}\n                index={index}\n                editState={editState}\n                setEditState={setEditState}\n                // confirmState={confirmState}\n                // setConfirmState={setConfirmState}\n                dataState={dataState}\n                setDataState={setDataState}\n\n              />)}\n            {provided.placeholder}\n          </BoardColumnContent>\n        )}\n      </Droppable>\n    </BoardColumnWrapper>\n  )\n}","import * as React from 'react';\nimport { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport device from '../data/breakpoint';\n// Import data for board\nimport { initialBoardData } from '../data/board-initial-data';\n// Import BoardColumn component\nimport { BoardColumn } from './board-column';\n\n// Create styled head element properties\nconst HeadEl = styled.h1`\n\ntext-align:center; \nmargin:auto;\nline-height:51px;\nvertical-align:middle;\nfont:  sans-serif;\ncolor: #61677C;\nletter-spacing: -0.1px;\ntext-shadow: 3px 3px 0 #FFF;\nbackground-color: #EBECF0;\nborder-radius: 4px;\nbox-shadow: 9px 9px 15px #d1d9e6, -9px -9px 15px #fff;\npadding:10px;\n\n@media ${device.galaxyFold} { \n  max-width: 180px;\n  padding:1px;\n  font-size:21px;\n  margin-top: 4vh;\n  line-height:40px;\n}\n@media ${device.iphone5se} {   \n  max-width: 180px;\n  padding:1px;\n  font-size:23px;\n}\n\n@media ${device.iphone678} { \n  max-width: 210px;\n  padding:3px;\n  font-size:25px;\n}\n\n@media ${device.surfaceDuo} { \n  max-width: 250px;\n  padding:3px;\n  font-size:28px;\n}\n\n@media ${device.ipad} { \n  max-width: 270px;\n  padding:0.1vw;\n  font-size:4vw;\n  margin-top: 3vh;\n  margin-bottom:3vh;\n  line-height:8vw;\n}\n@media ${device.laptop} { \n  max-width: 30vw;\n  padding:0.2vh;\n  font-size:3vw;\n  line-height:10vh;\n}\n`\n\n// Create styled draggable board Column element properties\nconst DroppableBoardEl = styled.div`\n  display: flex;\n  justify-content: space-around; \n  align-items: flex-start;\n  margin: auto;  \n`\n\nexport const Board: React.FC = (props) => {\n\n  // Initialize board state with board data\n\n  const initialDataState = { ...initialBoardData };\n  const initialItems: object = initialDataState.items;\n\n  for (const value in initialItems) {\n    if (Object.prototype.hasOwnProperty.call(initialItems, value)) {\n      Object.assign(value, { isActive: false })\n    }\n  };\n\n  if (!localStorage.dataState) {\n    localStorage.setItem('dataState', JSON.stringify({ dataState: initialDataState }));\n  };\n  // console.log(\"localStorage:\", localStorage);\n  let jsonLocalData: any = localStorage.getItem('dataState');\n  // console.log(\"jsonLocalData:\", jsonLocalData);\n  const jsonParsedDataState: any = JSON.parse(jsonLocalData);\n  // console.log(\"jsonParsedDataState:\", jsonParsedDataState);\n  const [dataState, setDataState] = useState<any>(jsonParsedDataState.dataState);\n  // console.log(\"dataState:\", dataState);\n  // Handle drag & drop\n  const onDragEnd = (result: any) => {\n    const { source, destination, draggableId, type } = result\n\n    // Do nothing if item is dropped outside the list\n    if (!destination || destination === undefined || destination === null) {\n      return\n    }\n\n    // Do nothing if the item is dropped into the same place\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return\n    }\n    //Check out that the column is being dragged\n    if (type === \"column\") {\n      // Get all columns ids\n      const newColumnsOrder = Array.from(dataState.columnsOrder);\n      // Remove the id of dragged column from its original position\n      newColumnsOrder.splice(source.index, 1);\n      // Insert the id of dragged column to the new position\n      newColumnsOrder.splice(destination.index, 0, draggableId);\n      // Update new data state with updated order for columns\n      const newDataState = {\n        ...dataState,\n        columnsOrder: newColumnsOrder\n      };\n      setDataState(newDataState);\n      localStorage.setItem('dataState', JSON.stringify({ dataState: newDataState }));\n      return\n    }\n\n    // Find column from which the item was dragged from\n    const columnStart = (dataState.columns as any)[source.droppableId]\n\n    // Find column in which the item was dropped\n    const columnFinish = (dataState.columns as any)[destination.droppableId]\n\n    // Moving items in the same list\n    if (columnStart === columnFinish) {\n      // Get all item ids in currently active list     \n      const newItemsIds = Array.from(columnStart.itemsIds)\n\n      // Remove the id of dragged item from its original position\n      newItemsIds.splice(source.index, 1)\n\n      // Insert the id of dragged item to the new position\n      newItemsIds.splice(destination.index, 0, draggableId)\n\n      // Create new, updated, object with data for columns\n      const newColumnStart = {\n        ...columnStart,\n        itemsIds: newItemsIds\n      }\n\n      // Create new board state with updated data for columns\n      const newState = {\n        ...dataState,\n        columns: {\n          ...dataState.columns,\n          [newColumnStart.id]: newColumnStart\n        }\n      }\n\n      // Update the board state with new data\n      setDataState(newState);\n      localStorage.setItem('dataState', JSON.stringify({ dataState: newState }));\n\n    } else {\n      // Moving items from one list to another\n      // Get all item ids in source list\n      const newStartItemsIds = Array.from(columnStart.itemsIds)\n\n      // Remove the id of dragged item from its original position\n      newStartItemsIds.splice(source.index, 1)\n\n      // Create new, updated, object with data for source column\n      const newColumnStart = {\n        ...columnStart,\n        itemsIds: newStartItemsIds\n      }\n\n      // Get all item ids in destination list\n      const newFinishItemsIds = Array.from(columnFinish.itemsIds)\n\n      // Insert the id of dragged item to the new position in destination list\n      newFinishItemsIds.splice(destination.index, 0, draggableId)\n\n      // Create new, updated, object with data for destination column\n      const newColumnFinish = {\n        ...columnFinish,\n        itemsIds: newFinishItemsIds\n      }\n\n      // Create new board state with updated data for both, source and destination columns\n      const newState = {\n        ...dataState,\n        columns: {\n          ...dataState.columns,\n          [newColumnStart.id]: newColumnStart,\n          [newColumnFinish.id]: newColumnFinish\n        }\n      }\n      // Update the board state with new data\n      setDataState(newState);\n      localStorage.setItem('dataState', JSON.stringify({ dataState: newState }));\n    }\n  }\n\n  return (\n    <>\n      <HeadEl>\n        Kanban Board\n      </HeadEl>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId='all-columns' direction=\"horizontal\" type=\"column\" >\n          {(provided, snapshot) => (\n            <DroppableBoardEl\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {dataState.columnsOrder.map((columnId: string, index: number) => {\n                // Get id of the current column\n                const column = (dataState.columns as any)[columnId]\n                // Get item belonging to the current column\n                const items = column.itemsIds.map((itemId: string) => (dataState.items as any)[itemId])\n                // Render the BoardColumn component\n\n                // console.log('board items:', items);\n                // console.log('board column:', column);\n                // console.log('board dataState:', dataState);\n                return (\n                  <Draggable\n                    draggableId={columnId}\n                    index={index}\n                    key={columnId}\n                  >\n                    {(provided, snapshot) => (\n                      <div\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                      >\n                        <BoardColumn\n                          key={column.id}\n                          dataState={dataState}\n                          column={column}\n                          items={items}\n                          setDataState={setDataState}\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                )\n              })\n              }\n              {provided.placeholder}\n            </DroppableBoardEl>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </>\n  )\n}","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\n\n// Import main Board component\nimport { Board } from './components/board';\n\n// Use createGlobalStyle to change the background of 'body' element\nconst GlobalStyle = createGlobalStyle`\n  body {    \n    background-color: #ecf0f3;\n  }\n`\n\n// Create component for the page\nconst Page = () => (<>\n  <Board />\n  <GlobalStyle />\n</>)\n\n// Render the page into DOM\nReactDOM.render(<Page />, document.getElementById('root'))\n\n"],"sourceRoot":""}